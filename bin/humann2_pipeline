#!/usr/bin/env python3

"""
humann2.py - Invoke a CWL Humann2 workflow
By: Shaun Adkins (sadkins@som.umaryland.edu)

"""

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

from argparse import ArgumentParser
import sys
import logging
import yaml
import os
import subprocess
import shlex
import glob
import shutil

CWL_WORKFLOW = os.path.dirname(__file__) + "../pipelines/humann2/humann2_complete.cwl"
CWL_WORKFLOW_JOIN = os.path.dirname(__file__) + "../pipelines/humann2/humann2_join_complete.cwl"


########
# Main #
########

def main():
    # Set up options parser and help statement
    description = "Invoke a Humann2 pipeline using the Common Workflow Language"
    parser = ArgumentParser(description=description)
    parser.add_argument("--input_file_list", "-i", help="List file containing paths to FASTA samples", metavar="/path/to/input.list", required=True)
    parser.add_argument("--config_file", "-c", help="YAML-based config file of parameters to add", metavar="/path/to/config.yml", required=True)
    parser.add_argument("--out_dir", "-o", help="Optional. Directory to stage output files.  Default is ./cwl_output", metavar="/path/to/outdir", default="./cwl_output")

    parser.add_argument("--debug", "-d", help="Set the debug level", default="ERROR", metavar="DEBUG/INFO/WARNING/ERROR/CRITICAL")
    args = parser.parse_args()
    check_args(args, parser)

    yaml_dict = read_config(args.config_file)
    inputs = read_in_list(args.input_file_list)
    add_input_files_to_yaml(yaml_dict, inputs)

    # Will eventually copy humann2_complete genefamilies.tsv files here
    merged_outdir = args.out_dir + "/merged_dir"
    yaml_dict['input_dir'] = {'class': 'Directory', 'path': merged_outdir}
    #print(yaml.dump(yaml_dict))

    # Write out YAML
    final_yaml = create_final_yaml_name(args.config_file)
    write_final_yaml(yaml_dict, final_yaml)

    # Invoke CWL with new YAML job input
    run_cwl_command(args.out_dir, final_yaml, CWL_WORKFLOW)

    # Copy all genefamilies.tsv files to an inner output directory
    if not os.path.exists(merged_outdir):
        os.makedirs(merged_outdir)
    for f in glob.glob(r'*.genefamilies.tsv'):
        print("Copying {0} to {1}").format(f, merged_outdir)
        shutil.copy(f, merged_outdir)
    run_cwl_command(args.out_dir, final_yaml, CWL_WORKFLOW_JOIN)

    # Lots of output dirs were created that weren't removed.  Remove them
    rm_tmp_cmd = "rm -rf tmp*"
    args = shlex.split(rm_tmp_cmd) # Split cmd using shell-like syntax
    subprocess.call(args)

def check_args(args, parser):
    """ Validate the passed arguments """
    log_level = args.debug.upper()
    num_level = getattr(logging, log_level)

    # Verify that our specified log_level has a numerical value associated
    if not isinstance(num_level, int):
        raise ValueError('Invalid log level: %s' % log_level)

    # Create the logger
    logging.basicConfig(level=num_level)

def read_config(yaml_in):
    """ Convert YAML config file into dictionary """
    with open(yaml_in) as f:
        return yaml.safe_load(f)

def read_in_list(list_in):
    """ Convert list file into list object """
    file_list = [line.rstrip('\n') for line in open(list_in)]
    return file_list

def add_input_files_to_yaml(yaml_dict, inputs):
    """ Join the list of input files into the existing YAML dictionary """
    yaml_dict['input_file'] = list()
    for i in inputs:
        # Add the sequence to the YAML dict
        input_dict = {'class': 'File', 'path': i}
        yaml_dict['input_file'].append(input_dict)

def create_final_yaml_name(orig_yaml_name):
    """ Use YAML template to create final file name """
    orig_file_base = os.path.basename(orig_yaml_name)
    name_root = os.path.splitext(orig_file_base)[0]
    final_yaml_name = name_root + ".final.yml" # NOTE: Will write to current directory
    return final_yaml_name

def write_final_yaml(yaml_dict, out_yaml):
    """ Write out the final YAML """
    with open(out_yaml, "w") as f:
        yaml.dump(yaml_dict, f)

def run_cwl_command(outdir, job_input, workflow_cwl):
    """ Create and run the CWL-runner job """
    cwl_cmd = "cwl-runner --tmp-outdir-prefix=tmp_out --tmpdir-prefix=./tmp --outdir={0} {1} {2}".format(outdir, workflow_cwl, job_input)
    print(cwl_cmd)
    args = shlex.split(cwl_cmd) # Split cmd using shell-like syntax
    # https://stackoverflow.com/questions/4417546/constantly-print-subprocess-output-while-process-is-running
    with subprocess.Popen(cwl_cmd, stdout = subprocess.PIPE, stderr = subprocess.STDOUT, shell = True) as p:
        for line in p.stdout:
            print(line)
    if p.returncode != 0:
        raise subprocess.CalledProcessError(p.returncode, p.args)

if __name__ == '__main__':
    main()
    sys.exit(0)
